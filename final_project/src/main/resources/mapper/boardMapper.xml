<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.BoardDao">
<!-- xml에서 말하는 namespace는 xml을 정확하게 작성했는지 검증하는 기술-->
  <!-- writer를 입력한 경우 where절을 추가하는 동적 쿼리 -->
  <select id="count" resultType="int">
	select  /*+ index(board board_pk_bno) */ count(*) from board
	<where>
		<if test="writer!=null">writer=#{writer}</if> 
	</where>
  </select>	
  
  <!-- writer를 입력한 경우 where절을 추가하는 동적 쿼리 -->
  <select id="findAll" resultType="com.example.demo.dto.BoardDto$ForList">
  <![CDATA[
	select * from  	
  	(
  		select rownum as rnum, b.* from 
  			(select /*+ index_desc(board board_pk_bno) */ bno, title, writer, readCnt, writeTime, commentCnt from board  
  			<where>
				<if test="writer!=null">writer=#{writer}</if> 
			</where>
  			 order by bno desc) b
  		where rownum <=#{end}
  	)
  	where rnum>=#{start}
  	 	]]>
  </select>
  
  <insert id="save">
    <selectKey keyProperty="bno" order="BEFORE" resultType="int">
      select board_seq.nextval from dual
    </selectKey>
      insert into board(bno,title,content,writer) values(#{bno},#{title},#{content},#{writer})
  </insert>  
  
  <!-- 제목, 내용, 조회수, 좋아요, 싫어요, 댓글수 중 사용자가 선택한 컬럼을 변경 -->
  <update id="update">
  	update board 
  	  <trim prefix="set" suffixOverrides=",">
	   	<if test="title != null">title=#{title},</if>
	  	<if test="content != null">content=#{content},</if>
	  	<if test="readCnt != null">readCnt=readCnt+1,</if>
	  	<if test="goodCnt != null">goodCnt=goodCnt+1,</if>
	  	<if test="badCnt != null">badCnt=badCnt+1,</if>
	  	<if test="commentCnt != null">commentCnt=#{commentCnt},</if>
	  </trim>
  	where bno=#{bno}
  </update>
 	
  <select id="findById" resultType="com.example.demo.dto.BoardDto$Read">
  <![CDATA[
  	select * from board where bno=#{bno} and rownum<=1
  	]]>
  </select>
  <resultMap type="com.example.demo.dto.CommentDto$Read" id="commentMap">
  		<result property="cno" column="cno"/>
  		<result property="content" column="ccontent"/>
  		<result property="writer" column="cwriter"/>
  		<result property="writeTime" column="cwriteTime"/>
  </resultMap>
  
  <resultMap type="com.example.demo.dto.BoardDto$Read" id="boardMap">
  		<result property="bno" column="bno"/>
  		<result property="title" column="title"/>
  		<result property="content" column="content"/>
  		<result property="writer" column="writer"/>
  		<result property="writeTime" column="writeTime"/>
  		<result property="readCnt" column="readCnt"/>
  		<result property="commentCnt" column="commentCnt"/>
  		<result property="goodCnt" column="goodCnt"/>
  		<result property="badCnt" column="badCnt"/>
  		<collection property="comments" resultMap="commentMap"></collection>
  </resultMap>
  
  <select id="findById2" resultType="select ">
  	select b.*, c.cno, c.content as ccontent, c.writer as cwrite, c.writeTime as cwriteTime from board b left outer join comments c on b.bno=c.bno where b.bno=#{bno};
  </select>
  
  <select id="findWriterById" resultType="string">
   <![CDATA[
  	select writer from board where bno=#{bno} and rownum<=1
  	]]>
  </select>
  
  <delete id="deleteById">
  	delete from board where bno=#{bno}
  </delete>
</mapper>
